import telebot
import requests
import random
import os
from telebot.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardButton, InlineKeyboardMarkup
from datetime import datetime, timedelta
import time
import atexit
from telebot import TeleBot, types
import pytz
import threading

# Thay th·∫ø gi√° tr·ªã d∆∞·ªõi ƒë√¢y b·∫±ng token c·ªßa bot Telegram c·ªßa b·∫°n
API_KEY = '6757521267:AAE5IHnHoESuOPViTNOJsxrYMlit6jtgbwQ'
# Kh·ªüi t·∫°o bot
bot = telebot.TeleBot(API_KEY, parse_mode=None)
# D√πng tr·∫°ng th√°i (state) ƒë·ªÉ theo d√µi qu√° tr√¨nh c∆∞·ª£c
user_state = {}
# D√πng t·ª´ ƒëi·ªÉn ƒë·ªÉ l∆∞u s·ªë d∆∞ c·ªßa ng∆∞·ªùi d√πng
user_balance = {}
# T·∫°o t·ª´ ƒëi·ªÉn l∆∞u l·ªãch s·ª≠ c∆∞·ª£c v√† l·ªãch s·ª≠ r√∫t ti·ªÅn
user_bet_history = {}
user_withdraw_history = {}
# T·∫°o t·ª´ ƒëi·ªÉn gitcodes
used_gitcodes = []
gitcode_amounts = {}
user_pending_gitcodes = {}
# Define a separate dictionary to track user game states
user_game_state = {}
# Dictionary to store user balances (user_id: balance)
user_balances = {}
# Dictionary to store user bets
user_bets = {}  # {user_id: {"bet_type": "", "amount": 0, "chosen_number": ""}}
# Inside your message handler function
vietnam_timezone = pytz.timezone(
    'Asia/Ho_Chi_Minh')  # Define the Vietnam timezone
# Get the current time in Vietnam timezone
current_time_vietnam = datetime.now(
    tz=vietnam_timezone).strftime("%Y-%m-%d %H:%M:%S")
group_chat_id2 = "-1002121532989"  # Replace with your second group chat ID
# ƒê·ªãnh nghƒ©a id c·ªßa nh√≥m m√† b·∫°n mu·ªën g·ª≠i th√¥ng b√°o
group_chat_id = '-1002121532989'
def get_user_info(user_id):
  try:
    user = bot.get_chat(user_id)
    return user
  except telebot.apihelper.ApiException as e:
    print("Error fetching user info:", e)
    return None


# H√†m ƒë·ªÉ l∆∞u t·∫•t c·∫£ s·ªë d∆∞ v√†o t·ªáp vƒÉn b·∫£n
def save_balance_to_file():
  with open("id.txt", "w") as f:
    for user_id, balance in user_balance.items():
      f.write(f"{user_id} {balance}\n")


# H√†m ƒë·ªÉ ƒë·ªçc s·ªë d∆∞ t·ª´ t·ªáp vƒÉn b·∫£n v√† c·∫≠p nh·∫≠t v√†o t·ª´ ƒëi·ªÉn user_balance
def load_balance_from_file():
  if os.path.exists("id.txt"):
    with open("id.txt", "r") as f:
      for line in f:
        user_id, balance_str = line.strip().split()
        balance = float(balance_str)
        if balance.is_integer():
          balance = int(balance)
        user_balance[int(user_id)] = balance


# G·ªçi h√†m load_balance_from_file khi ch∆∞∆°ng tr√¨nh ch·∫°y ƒë·ªÉ t·∫£i s·ªë d∆∞ t·ª´ t·ªáp
load_balance_from_file()


# H√†m x·ª≠ l√Ω khi bot b·ªã t·∫Øt ho·∫∑c l·ªói, ƒë·ªÉ l∆∞u s·ªë d∆∞ v√†o t·ªáp id.txt tr∆∞·ªõc khi tho√°t
def on_exit():
  save_balance_to_file()


# X·ª≠ l√Ω khi bot b·ªã t·∫Øt ho·∫∑c l·ªói
atexit.register(save_balance_to_file)

# Add these variables for Gitcode handling
GITCODE_FILE = "gitcode.txt"
# Function to create a Gitcode with a custom amount
def create_gitcode(amount):
    gitcode = ''.join(random.choices('ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789', k=8))
    gitcode_amounts[gitcode] = amount
    with open(GITCODE_FILE, "a") as f:
        f.write(f"{gitcode}:{amount}\n")
    return gitcode

# Function to read Gitcodes from the file
def read_gitcodes():
    if not os.path.exists(GITCODE_FILE):
        return
    with open(GITCODE_FILE, "r") as f:
        for line in f:
            gitcode, amount = line.strip().split(":")
            gitcode_amounts[gitcode] = int(amount)

# Function to remove a used Gitcode
def remove_gitcode(gitcode):
    with open(GITCODE_FILE, "r") as f:
        lines = f.readlines()
    with open(GITCODE_FILE, "w") as f:
        for line in lines:
            if not line.startswith(gitcode):
                f.write(line)

# Read Gitcodes from the file
read_gitcodes()

# Define the admin's user ID
admin_user_id = 6337933296 or 6630692765 or 5838967403 or 6050066066  # Replace with the actual admin user ID

@bot.message_handler(commands=['regcode'])
def create_gitcode_handler(message):
    # Check if the user is the admin
    if message.from_user.id == admin_user_id:
        bot.reply_to(message, "Vui l√≤ng nh·∫≠p s·ªë ti·ªÅn cho gitcode:")
        bot.register_next_step_handler(message, process_gitcode_amount)
    else:
        bot.reply_to(message, "B·∫°n kh√¥ng c√≥ quy·ªÅn th·ª±c hi·ªán l·ªánh n√†y.")

def process_gitcode_amount(message):
    try:
        amount = int(message.text)
        formatted_amount = "{:,.0f}".format(amount).replace(".", ",")
        gitcode = create_gitcode(amount)
        bot.reply_to(message, f"ƒê√£ t·∫°o gitcode th√†nh c√¥ng. Gitcode c·ªßa b·∫°n l√†: {gitcode} ({formatted_amount} ƒë·ªìng).")
    except ValueError:
        bot.reply_to(message, "S·ªë ti·ªÅn kh√¥ng h·ª£p l·ªá.")

@bot.message_handler(func=lambda message: message.text.lower() == 'code')
def naptien_gitcode(message):
    bot.reply_to(message, "B·∫°n ƒê√£ Ch·ªçn Nh·∫≠p Code\nB·∫°n H√£y Nh·∫≠p Code\n‚û°Ô∏èVD: ABCD")
    bot.register_next_step_handler(message, process_naptien_gitcode)

def process_naptien_gitcode(message):
    load_balance_from_file()
    gitcode = message.text
    user_id = message.from_user.id  # Get the user's ID
    if gitcode in gitcode_amounts:
        amount = gitcode_amounts[gitcode]

        # Check if the user's balance exists in the dictionary, initialize it if not
        if user_id not in user_balance:
            user_balance[user_id] = 0

        user_balance[user_id] += amount
        remove_gitcode(gitcode)
        del gitcode_amounts[gitcode]
        bot.reply_to(message, f"Gitcode Th√†nh C√¥ng!\nS·ªë d∆∞ c·ªßa b·∫°n l√†: {user_balance[user_id]:,}ƒë.\nüíπCh√∫c B·∫°n May M·∫Øn Nh√©üíñ")
        
        # S·ª≠ d·ª•ng ph∆∞∆°ng th·ª©c send_message ƒë·ªÉ g·ª≠i th√¥ng b√°o v√†o nh√≥m
        bot.send_message(group_chat_id, f"""
Ng∆∞·ªùi ch∆°i {message.from_user.first_name} 
User: {user_id}
ƒê√£ N·∫°p: {amount:,}ƒë b·∫±ng Gitcode.""")
        # Save the updated balance to the file
        save_balance_to_file()
        load_balance_from_file()
    else:
        bot.reply_to(message, "Gitcode kh√¥ng h·ª£p l·ªá ho·∫∑c ƒë√£ ƒë∆∞·ª£c s·ª≠ d·ª•ng.")





# H√†m x·ª≠ l√Ω chuy·ªÉn ti·ªÅn v√† c·∫≠p nh·∫≠t s·ªë d∆∞ c·ªßa c·∫£ ng∆∞·ªùi g·ª≠i v√† ng∆∞·ªùi ƒë∆∞·ª£c chuy·ªÉn
def deduct_balance(sender_id, recipient_id, amount):
    # Ki·ªÉm tra xem c·∫£ sender_id v√† recipient_id c√≥ t·ªìn t·∫°i trong user_balance kh√¥ng
    if sender_id not in user_balance or recipient_id not in user_balance:
        return False

    # Ki·ªÉm tra xem s·ªë ti·ªÅn c·∫ßn chuy·ªÉn c√≥ l·ªõn h∆°n 0 v√† kh√¥ng v∆∞·ª£t qu√° s·ªë d∆∞ c·ªßa ng∆∞·ªùi g·ª≠i
    if amount <= 0 or user_balance[sender_id] < amount:
        return False

    # Tr·ª´ s·ªë ti·ªÅn t·ª´ s·ªë d∆∞ c·ªßa ng∆∞·ªùi g·ª≠i v√† c·ªông cho ng∆∞·ªùi ƒë∆∞·ª£c chuy·ªÉn
    user_balance[sender_id] -= amount
    user_balance[recipient_id] += amount

    # L∆∞u s·ªë d∆∞ v√†o t·ªáp vƒÉn b·∫£n
    save_balance_to_file()

    return True


@bot.message_handler(commands=['tangdiem'])
def chuyentien_money(message):
    load_balance_from_file()
    try:
        # Parse th√¥ng tin ng∆∞·ªùi d√πng v√† s·ªë ti·ªÅn t·ª´ tin nh·∫Øn
        user_id, amount = map(int, message.text.split()[1:3])

        # Ki·ªÉm tra xem ng∆∞·ªùi g·ª≠i c√≥ ƒë·ªß s·ªë d∆∞ ƒë·ªÉ th·ª±c hi·ªán chuy·ªÉn kho·∫£n kh√¥ng
        sender_id = message.from_user.id
        sender_name = message.from_user.first_name  # L·∫•y t√™n c·ªßa ng∆∞·ªùi g·ª≠i

        if sender_id not in user_balance or user_balance[sender_id] < amount:
            bot.reply_to(message, "B·∫°n kh√¥ng c√≥ ƒë·ªß s·ªë d∆∞ ƒë·ªÉ chuy·ªÉn kho·∫£n n√†y.")
            return

        # Th·ª±c hi·ªán chuy·ªÉn kho·∫£n v√† th√¥ng b√°o k·∫øt qu·∫£
        if deduct_balance(sender_id, user_id, amount):
            recipient_name = bot.get_chat(user_id).first_name  # L·∫•y t√™n c·ªßa ng∆∞·ªùi ƒë∆∞·ª£c chuy·ªÉn
            bot.reply_to(message, f"Chuy·ªÉn kho·∫£n th√†nh c√¥ng! {amount:,} chuy·ªÉn ƒë·∫øn ng∆∞·ªùi d√πng {recipient_name}.")
            bot.send_message(user_id, f"B·∫°n ƒë√£ nh·∫≠n ƒë∆∞·ª£c {amount:,}ƒë ƒë∆∞·ª£c chuy·ªÉn t·ª´ {sender_name}, id ng∆∞·ªùi d√πng l√†: {sender_id}.")
        else:
            bot.reply_to(message, "Kh√¥ng h·ª£p l·ªá. S·ª≠ d·ª•ng /chuyentien <user_id> <s·ªë ti·ªÅn>")
    except Exception as e:
        bot.reply_to(message, """
T·∫°o l·ªánh ƒë·ªÉ chuy·ªÉn ti·ªÅn c·ªßa m√¨nh cho ID ng∆∞·ªùi ch∆°i kh√°c:
    
/chuyentien [d·∫•u c√°ch] ID nh·∫≠n ti·ªÅn [d·∫•u c√°ch] s·ªë ti·ªÅn
    
VD: /chuyentien 987654321 10000""")


@bot.message_handler(commands=["cdiem"])
def set_balance(msg):
  if msg.from_user.id == 6337933296 or 6630692765 or 5838967403 or 6050066066:
    bot.reply_to(msg, """
üî≠Nh·∫≠p user ID c·ªßa th√†nh vi√™nüî®
        """)
    user_state[msg.from_user.id] = "set_user_id"
  else:
    bot.reply_to(msg, "B·∫°n kh√¥ng c√≥ quy·ªÅn s·ª≠ d·ª•ng l·ªánh n√†y.")


@bot.message_handler(func=lambda message: message.from_user.id in user_state
                     and user_state[message.from_user.id] == "set_user_id")
def set_user_balance(msg):
  try:
    user_id = int(msg.text)
    bot.reply_to(
        msg, """
‚è≤Nh·∫≠p s·ªë ti·ªÅn mu·ªën c·ªông ho·∫∑c tr·ª´ü™§ 
üö¨(v√≠ d·ª•: +1000 ho·∫∑c -1000)üéö
ü´° K√®m N·ªôi Dung üëäüèΩ
        """)
    user_state[msg.from_user.id] = (user_id, "setbalance")
  except ValueError:
    bot.reply_to(msg, "Vui l√≤ng nh·∫≠p m·ªôt user ID h·ª£p l·ªá.")


@bot.message_handler(func=lambda message: message.from_user.id in user_state
                     and user_state[message.from_user.id][1] == "setbalance")
def update_balance(msg):
  load_balance_from_file()
  try:
    user_input = msg.text.split()
    if len(user_input) < 2:
      bot.reply_to(msg, "Vui l√≤ng nh·∫≠p s·ªë ti·ªÅn v√† n·ªôi dung c·∫ßn k√®m")
      return

    balance_change = int(user_input[0])
    user_id, _ = user_state[msg.from_user.id]
    current_balance = user_balance.get(user_id, 0)
    new_balance = current_balance + balance_change
    user_balance[user_id] = new_balance
    del user_state[msg.from_user.id]
    save_balance_to_file()
    load_balance_from_file()

    # L·∫•y n·ªôi dung t·ª´ tin nh·∫Øn c·ªßa ng∆∞·ªùi ch∆°i
    user_message = " ".join(user_input[1:])
    # G·ª≠i th√¥ng b√°o c·∫≠p nh·∫≠t th√†nh c√¥ng cho ng∆∞·ªùi ch∆°i k√®m theo n·ªôi dung
    notification_message = f"""
ü´•B·∫°n ƒê√£ N·∫°p Ti·ªÅn Th√†nh C√¥ngü§ñ
ü´ÇSD Hi·ªán T·∫°i: {new_balance:,}ƒëüê•
üëæN·ªôi Dung: {user_message} ü´∂üèΩ
üêùCh√∫c B·∫°n Ch∆°i Game Vui V·∫ªüê≥
"""
    bot.send_message(user_id, notification_message)

    # G·ª≠i th√¥ng b√°o ƒë·∫øn nh√≥m v·ªÅ vi·ªác c√≥ ng∆∞·ªùi ch∆°i ƒë·∫∑t c∆∞·ª£c
    group_chat_id = -1002121532989  # Thay th·∫ø b·∫±ng ID th·ª±c s·ª± c·ªßa nh√≥m chat
    bot.send_message(chat_id=group_chat_id, text=notification_message
                     )  # S·ª≠ d·ª•ng notification_message thay cho result_message
  except ValueError:
    bot.reply_to(msg, "Vui l√≤ng nh·∫≠p m·ªôt s·ªë ti·ªÅn h·ª£p l·ªá.")




# H√†m hi·ªÉn th·ªã menu ch√≠nh
@bot.message_handler(commands=["start"])
def show_main_menu(msg):
  user_id = msg.from_user.id

  # Check if the user is already in the user_balance dictionary
  if user_id not in user_balance:
    user_balance[user_id] = 0  # Set initial balance to 0 for new users
    save_balance_to_file()  # Save user balances to the text file

  markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
  rows = [
      ["üë§ T√†i Kho·∫£n", "üé≤ Soi c·∫ßu"],
      ["üí∏ R√∫t Ti·ªÅn", "üíµ N·∫°p Ti·ªÅn"],
      ["üìà L·ªãch S·ª≠ C∆∞·ª£c", "üìä L·ªãch S·ª≠ R√∫t"],
      ["üì§Chuy·ªÉn Ti·ªÅnüì™", "ü´ßNh·∫≠p CODEüí∂"],
  ]

  for row in rows:
    markup.row(*[types.KeyboardButton(button_text) for button_text in row])

  # Send a message with a photo link
  photo_url = "https://gamebaidoithuong.zone/wp-content/uploads/2021/12/game-bai-doi-thuong-gamebaidoithuongzone-3.jpg"
  caption = """
<b>Ch√†o M·ª´ng B·∫°n ƒê√£ ƒê·∫øn V·ªõi S√¢n Ch∆°i Gi·∫£i Tr√≠</b>
      <code>GAME TAXU</code>
<b>Game Xanh Ch√≠nh N√≥i Kh√¥ng V·ªõi Ch·ªânh C·∫ßu</b>

üëâ <strong>C√°ch ch∆°i ƒë∆°n gi·∫£n, ti·ªán l·ª£i</strong> üéÅ

üëâ <b>N·∫°p r√∫t nhanh ch√≥ng, ƒëa d·∫°ng h√¨nh th·ª©c</b> üí∏

üëâ <b>C√≥ Nhi·ªÅu Ph·∫ßn Qu√† D√†nh Cho Ng∆∞·ªùi Ch∆°i M·ªõi</b> ü§ù

üëâ <b>ƒêua top th·∫≠t hƒÉng, nh·∫≠n qu√† c·ª±c cƒÉng</b> üíç

üëâ <b>An to√†n, b·∫£o m·∫≠t tuy·ªát ƒë·ªëi</b> üèÜ

‚ö†Ô∏è <b>Ch√∫ √Ω ƒë·ªÅ ph√≤ng l·ª´a ƒë·∫£o, Ch√∫ng T√¥i Kh√¥ng inbox Tr∆∞·ªõc</b> ‚ö†Ô∏è
"""
  bot.send_photo(msg.chat.id,
                 photo_url,
                 caption=caption,
                 reply_markup=markup,
                 parse_mode='HTML')


# H√†m x·ª≠ l√Ω khi ng∆∞·ªùi d√πng ch·ªçn n√∫t
@bot.message_handler(func=lambda message: message.text == "üë§ T√†i Kho·∫£n")
#@bot.message_handler(commands=["diem"])
def handle_check_balance_button(msg):
  load_balance_from_file()
  check_balance(msg)

@bot.message_handler(func=lambda message: message.text == "üí∏ R√∫t Ti·ªÅn")
def handle_withdraw_balance_button(msg):
  withdraw_balance(msg)

@bot.message_handler(func=lambda message: message.text == "üé≤ Soi c·∫ßu")
def handle_game_list_button(msg):
  show_game_options(msg)

@bot.message_handler(func=lambda message: message.text == "üíµ N·∫°p Ti·ªÅn")
def handle_deposit_button(msg):
  napwithdraw_balance(msg)

@bot.message_handler(func=lambda message: message.text == "üìà L·ªãch S·ª≠ C∆∞·ª£c")
def handle_bet_history_button(msg):
  show_bet_history(msg)

@bot.message_handler(func=lambda message: message.text == "üìä L·ªãch S·ª≠ R√∫t")
def handle_withdraw_history_button(msg):
  show_withdraw_history(msg)

@bot.message_handler(func=lambda message: message.text == "üì§Chuy·ªÉn Ti·ªÅnüì™")
def handle_chuyentien_money_button(msg):
    chuyentien_money(msg)

@bot.message_handler(func=lambda message: message.text == "ü´ßNh·∫≠p CODEüí∂")
def handle_naptien_gitcode_button(msg):
    naptien_gitcode(msg)

def show_game_options(msg):
   bot.send_message(msg.chat.id, "V√†o @kqtaixiu ƒë·ªÉ xem l·ªãch s·ª≠ c·∫ßu")
   
# H√†m ki·ªÉm tra s·ªë d∆∞
def check_balance(msg):
  user_id = msg.from_user.id
  balance = user_balance.get(user_id, 0)
  #photo_link = "https://scontent.fdad1-4.fna.fbcdn.net/v/t39.30808-6/374564260_311252494902338_4501893302206805342_n.jpg?_nc_cat=103&ccb=1-7&_nc_sid=49d041&_nc_ohc=ypCR3gJKO84AX8vBaGO&_nc_oc=AQkV2yigf-t0BVkyWvCT0B1QFbLFdXx-cDg9Lal65LdSPI_AvgJdmKKS0ZpvItzfP3rlfqLxFP3pFitVvMbCHjGI&_nc_ht=scontent.fdad1-4.fna&oh=00_AfCW5YKUPRq6IRYMDCqhbPKQYFlUoIbVsuCjDAmzsr50VA&oe=64F55781"  # Thay th·∫ø b·∫±ng ƒë∆∞·ªùng d·∫´n URL c·ªßa h√¨nh ·∫£nh
  #bot.send_photo(msg.chat.id,
  #               photo_link,
  #               caption=f"""
#üë§ <b>T√™n t√†i kho·∫£n</b>: <code>{msg.from_user.first_name}</code>
#üí≥ <b>ID T√†i kho·∫£n</b>: <code>{msg.from_user.id}</code>
#üí∞ <b>S·ªë d∆∞ c·ªßa b·∫°n</b>: {balance:,} ƒë
#        """,
#                 parse_mode='HTML')
  bot.send_message(msg.chat.id, f"""
üë§ T√™n t√†i kho·∫£n: {msg.from_user.first_name}
üí≥ ID T√†i kho·∫£n: {msg.from_user.id}
üí∞ S·ªë d∆∞ c·ªßa b·∫°n: {balance:,} ƒë
        """)


#h√†m r√∫t ti·ªÅn
def create_withdraw_method_keyboard():
  markup = InlineKeyboardMarkup()
  momo_button = InlineKeyboardButton("R√∫t qua MoMo", callback_data="momo")
  bank_button = InlineKeyboardButton("R√∫t qua ng√¢n h√†ng", callback_data="bank")
  markup.row(momo_button, bank_button)  # ƒê·∫∑t c·∫£ hai n√∫t tr√™n c√πng m·ªôt h√†ng
  return markup


# H√†m r√∫t ti·ªÅn t√†i kho·∫£n
def withdraw_balance(msg):
  chat_id = msg.chat.id
  user_id = msg.from_user.id
  user_state[user_id] = "withdraw_method"
  user_game_state.pop(user_id, None)  # Clear game state to avoid conflicts

  reply_markup = create_withdraw_method_keyboard(
  )  # T·∫°o b√†n ph√≠m cho ph∆∞∆°ng th·ª©c r√∫t
  bot.send_message(chat_id,
                   "Vui l√≤ng nh·∫Øn tin ri√™ng v·ªõi bot")
  bot.send_message(user_id,
                   "Ch·ªçn ph∆∞∆°ng th·ª©c r√∫t ti·ªÅn:",
                   reply_markup=reply_markup)


@bot.callback_query_handler(func=lambda call: call.data in ["momo", "bank"])
def handle_withdrawal_method_selection(call):
  user_id = call.from_user.id

  if call.data == "momo":
    user_state[user_id] = "momo_account"
    bot.send_message(user_id, "Nh·∫≠p s·ªë MoMo c·ªßa b·∫°n:")
  elif call.data == "bank":
    user_state[user_id] = "bank_account"
    bot.send_message(
        user_id, """
Nh·∫≠p th√¥ng tin t√†i kho·∫£n ng√¢n h√†ng c·ªßa b·∫°n:
VD: 0987654321 VCB 
 T√äN NG√ÇN H√ÄNG - M√É NG√ÇN H√ÄNG
üìå Vietcombank => VCB
üìå BIDV => BIDV 
üìå Vietinbank => VTB
üìå Techcombank => TCB
üìå MB Bank => MBB 
üìå Agribank => AGR 
üìå TienPhong Bank => TPB
üìå SHB bank => SHB
üìå ACB => ACB 
üìå Maritime Bank => MSB
üìå VIB => VIB
üìå Sacombank => STB
üìå VP Bank => VPB
üìå SeaBank => SEAB
üìå Shinhan bank Vi·ªát Nam => SHBVN
üìå Eximbank => EIB 
üìå KienLong Bank => KLB 
üìå Dong A Bank => DAB 
üìå HD Bank => HDB 
üìå LienVietPostBank => LPB 
üìå VietBank => VBB
üìå ABBANK => ABB 
üìå PG Bank => PGB
üìå PVComBank => PVC
üìå Bac A Bank => BAB 
üìå Sai Gon Commercial Bank => SCB
üìå BanVietBank => VCCB 
üìå Saigonbank => SGB
üìå Bao Viet Bank => BVB  
üìå Orient Commercial Bank => OCB 

‚ö†Ô∏è L∆∞u √Ω: ‚ùå Kh√¥ng h·ªó tr·ª£ ho√†n ti·ªÅn n·∫øu b·∫°n nh·∫≠p sai th√¥ng tin T√†i kho·∫£n. 
‚ùóÔ∏è R√∫t min 50K
""")

  bot.answer_callback_query(call.id, "B·∫°n ƒë√£ ch·ªçn ph∆∞∆°ng th·ª©c r√∫t ti·ªÅn.")


@bot.message_handler(
    func=lambda message: message.from_user.id in user_state and user_state[
        message.from_user.id] in ["momo_account", "bank_account"])
def process_account_info(msg):
  try:
    account_info = msg.text
    user_id = msg.from_user.id

    if user_state[user_id] == "momo_account":
      user_state[user_id] = (account_info, "withdraw_amount_momo")
      bot.reply_to(
          msg, """
‚ùóÔ∏èNh·∫≠p s·ªë ti·ªÅn b·∫°n mu·ªën r√∫t qua MoMoüíÆ
üö´VD: 50.000 - 50.000.000üöÆ
            """)
    elif user_state[user_id] == "bank_account":
      user_state[user_id] = (account_info, "withdraw_amount_bank")
      bot.reply_to(
          msg, """
‚ùóÔ∏èNh·∫≠p s·ªë ti·ªÅn b·∫°n mu·ªën r√∫t qua ng√¢n h√†ngüíÆ
üö´VD: 50.000 - 50.000.000üöÆ
            """)

  except ValueError:
    pass


@bot.message_handler(func=lambda message: message.from_user.id in user_state
                     and user_state[message.from_user.id][1] in
                     ["withdraw_amount_momo", "withdraw_amount_bank"])
def process_withdraw_amount(msg):
  try:
    account_info, withdraw_amount_type = user_state[msg.from_user.id]
    withdraw_amount = int(msg.text)
    user_id = msg.from_user.id
    user_balance_value = user_balance.get(user_id, 0)

    if withdraw_amount < 50000:
      bot.reply_to(
          msg, """
üñá S·ªë ti·ªÅn r√∫t ph·∫£i l·ªõn h∆°n ho·∫∑c b·∫±ng 50,000 ƒë·ªìng.üó≥
            """)
      del user_state[user_id]
      return

    if withdraw_amount > user_balance_value:
      bot.reply_to(
          msg, """
üåÄS·ªë d∆∞ c·ªßa b·∫°n kh√¥ng ƒë·ªßüí≥
ü™´Vui L√≤ng üîé/naptiepüîç C√≥ S·ªë D∆∞ M·ªõiüíé
            """)
      del user_state[user_id]
      return

    # Tr·ª´ s·ªë ti·ªÅn t·ª´ s·ªë d∆∞ c·ªßa ng∆∞·ªùi ch∆°i
    user_balance_value -= withdraw_amount
    user_balance[user_id] = user_balance_value

    with open("id.txt", "r") as f:
      lines = f.readlines()

    with open("id.txt", "w") as f:
      for line in lines:
        user_id_str, balance_str = line.strip().split()
        if int(user_id_str) == user_id:
          balance = int(balance_str)
          if withdraw_amount <= balance:
            balance -= withdraw_amount
            f.write(f"{user_id} {balance}\n")
          else:
            bot.reply_to(msg, "S·ªë d∆∞ kh√¥ng ƒë·ªß ƒë·ªÉ r√∫t s·ªë ti·ªÅn n√†y.")
        else:
          f.write(line)

    formatted_balance = "{:,.0f} ƒë".format(user_balance_value)
    account_type = "MoMo" if withdraw_amount_type == "withdraw_amount_momo" else "ng√¢n h√†ng"
    bot.reply_to(
        msg, f"""
‚è∫L·ªánh r√∫t: {withdraw_amount:,} VNƒêüîö
‚úÖC·ªßa b·∫°n v·ªÅ {account_type}: {account_info} ƒë∆∞·ª£c h·ªá th·ªëng checküîö
‚ò¢Ô∏èS·ªë ti·ªÅn c√≤n l·∫°i c·ªßa b·∫°n: {formatted_balance}
            """)

    request_message = f"""
‚û§T√™n Ng∆∞·ªùi R√∫t: {msg.from_user.first_name} 
‚û§Y√™u C·∫ßu R√∫t: {withdraw_amount:,} VNƒê 
‚û§V·ªÅ {account_type}: {account_info}
        """
    another_bot_token = "6755926001:AAGD0Gc9xMomJgnfhwjeIENF9XO0reeST1o"
    another_bot_chat_id = "6337933296"
    requests.get(
        f"https://api.telegram.org/bot{another_bot_token}/sendMessage?chat_id={another_bot_chat_id}&text={request_message}"
    )

    del user_state[user_id]

    user_withdraw_history.setdefault(user_id, []).append(
        (account_info, withdraw_amount))
    time.sleep(10)
    user_notification = f"""
üì¨ R√∫t ti·ªÅn th√†nh c√¥ng!
‚è∫ S·ªë ti·ªÅn r√∫t: {withdraw_amount:,} VNƒê
üìà S·ªë d∆∞ c√≤n l·∫°i: {formatted_balance}
        """
    bot.send_message(user_id, user_notification)

  except ValueError:
    pass



# H√†m l·ªánh n·∫°p ti·ªÅn
def deposit_info(msg):
  user_id = msg.from_user.id
  momo_account = "034xxxxxx"
  username = msg.from_user.username or msg.from_user.first_name

  photo_link = "https://scontent.fdad1-3.fna.fbcdn.net/v/t39.30808-6/368953112_304417105585877_8104665371433145272_n.jpg?_nc_cat=104&ccb=1-7&_nc_sid=730e14&_nc_ohc=9tNmHpvwO7UAX97Ml6f&_nc_ht=scontent.fdad1-3.fna&oh=00_AfDCHSKEY4xF2TL3e4YhEjvP0kh4uVR_4cEPa_GyN5hzXA&oe=64E49255"  # Replace with the actual image link

  # Creating the caption
  caption = f"""
üèß<b>Ph∆∞∆°ng Th·ª©c N·∫°p Bank</b>üèß
üí∞<b>MB BANK _ MOMO</b>üí∞
üîäT√†i Kho·∫£n: <code>{momo_account}</code>üîö
üîäN·ªôi Dung: <code>naptien_{msg.from_user.id}</code>üîö
üîä<b>Min N·∫°p: 10.000k Min R√∫t: 100.000k</b>
üîä<b>Min N·∫°p: 10.000 - 3.000.000</b>üîö
üîä<b>Vui l√≤ng ghi ƒë√∫ng n·ªôi dung ti·ªÅn v√†o 5s.</b>üîö
üîä<b>Kh√¥ng H·ªó Tr·ª£ L·ªói N·ªôi Dung.</b>üîö
üîä<b>N·∫†P NHANH QR PH√çA B√äN D∆Ø·ªöI NH√â</b> üîö
    """

  # Sending the caption and photo
  bot.send_message(msg.chat.id, caption, parse_mode='HTML')
  bot.send_photo(msg.chat.id, photo_link)


##############################

#@bot.message_handler(commands=["sc"])
def show_game_options(msg):
   chat_id = msg.chat.id
   bot.send_message(chat_id, "Soi c·∫ßu", reply_markup=soi_cau())

def soi_cau():
  markup = InlineKeyboardMarkup()
  momo_button = InlineKeyboardButton("Soi c·∫ßu", url="https://t.me/kqtaixiu")
  bank_button = InlineKeyboardButton("N·∫°p - R√∫t", url="https://t.me/testtaixiu1bot")
  markup.row(momo_button, bank_button)  # ƒê·∫∑t c·∫£ hai n√∫t tr√™n c√πng m·ªôt h√†ng
  return markup

#h√†m r√∫t ti·ªÅn
def napcreate_withdraw_method_keyboard():
  markup = InlineKeyboardMarkup()
  momo_button = InlineKeyboardButton("N·∫°p qua MoMo", callback_data="n·∫°p momo")
  bank_button = InlineKeyboardButton("N·∫°p qua ng√¢n h√†ng", callback_data="n·∫°p bank")
  markup.row(momo_button, bank_button)  # ƒê·∫∑t c·∫£ hai n√∫t tr√™n c√πng m·ªôt h√†ng
  return markup


# H√†m r√∫t ti·ªÅn t√†i kho·∫£n
def napwithdraw_balance(msg):
  chat_id = msg.chat.id
  user_id = msg.from_user.id
  user_state[user_id] = "napwithdraw_method"
  user_game_state.pop(user_id, None)  # Clear game state to avoid conflicts

  reply_markup = napcreate_withdraw_method_keyboard(
  )  # T·∫°o b√†n ph√≠m cho ph∆∞∆°ng th·ª©c r√∫t
  bot.send_message(chat_id,
                   "Vui l√≤ng nh·∫Øn tin ri√™ng v·ªõi bot")
  bot.send_message(user_id,
                   "Ch·ªçn ph∆∞∆°ng th·ª©c n·∫°p ti·ªÅn:",
                   reply_markup=reply_markup)
  

@bot.callback_query_handler(func=lambda call: call.data in ["n·∫°p momo", "n·∫°p bank"])
def naphandle_withdrawal_method_selection(call):
  user_id = call.from_user.id

  if call.data == "n·∫°p momo":
    user_state[user_id] = "napmomo_account"
    bot.send_message(user_id, "Nh·∫≠p s·ªë MoMo c·ªßa b·∫°n:")
  elif call.data == "n·∫°p bank":
    user_state[user_id] = "napbank_account"
    bot.send_message(
        user_id, """
Nh·∫≠p th√¥ng tin t√†i kho·∫£n ng√¢n h√†ng c·ªßa b·∫°n:
VD: 0987654321 VCB 
 T√äN NG√ÇN H√ÄNG - M√É NG√ÇN H√ÄNG
üìå Vietcombank => VCB
üìå BIDV => BIDV 
üìå Vietinbank => VTB
üìå Techcombank => TCB
üìå MB Bank => MBB 
üìå Agribank => AGR 
üìå TienPhong Bank => TPB
üìå SHB bank => SHB
üìå ACB => ACB 
üìå Maritime Bank => MSB
üìå VIB => VIB
üìå Sacombank => STB
üìå VP Bank => VPB
üìå SeaBank => SEAB
üìå Shinhan bank Vi·ªát Nam => SHBVN
üìå Eximbank => EIB 
üìå KienLong Bank => KLB 
üìå Dong A Bank => DAB 
üìå HD Bank => HDB 
üìå LienVietPostBank => LPB 
üìå VietBank => VBB
üìå ABBANK => ABB 
üìå PG Bank => PGB
üìå PVComBank => PVC
üìå Bac A Bank => BAB 
üìå Sai Gon Commercial Bank => SCB
üìå BanVietBank => VCCB 
üìå Saigonbank => SGB
üìå Bao Viet Bank => BVB  
üìå Orient Commercial Bank => OCB 

‚ö†Ô∏è L∆∞u √Ω: ‚ùå Kh√¥ng h·ªó tr·ª£ ho√†n ti·ªÅn n·∫øu b·∫°n nh·∫≠p sai th√¥ng tin T√†i kho·∫£n. 
‚ùóÔ∏è N·∫°p min 50K
""")

  bot.answer_callback_query(call.id, "B·∫°n ƒë√£ ch·ªçn ph∆∞∆°ng th·ª©c n·∫°p ti·ªÅn.")


@bot.message_handler(
    func=lambda message: message.from_user.id in user_state and user_state[
        message.from_user.id] in ["napmomo_account", "napbank_account"])
def napprocess_account_info(msg):
  try:
    account_info = msg.text
    user_id = msg.from_user.id

    if user_state[user_id] == "napmomo_account":
      user_state[user_id] = (account_info, "withdraw_amount_napmomo")
      bot.reply_to(
          msg, """
‚ùóÔ∏èNh·∫≠p s·ªë ti·ªÅn b·∫°n mu·ªën n·∫°p qua MoMoüíÆ
üö´VD: 10.000 - 50.000.000üöÆ
            """)
    elif user_state[user_id] == "napbank_account":
      user_state[user_id] = (account_info, "withdraw_amount_napbank")
      bot.reply_to(
          msg, """
‚ùóÔ∏èNh·∫≠p s·ªë ti·ªÅn b·∫°n mu·ªën n·∫°p qua ng√¢n h√†ngüíÆ
üö´VD: 10.000 - 50.000.000üöÆ
            """)

  except ValueError:
    pass


@bot.message_handler(func=lambda message: message.from_user.id in user_state
                     and user_state[message.from_user.id][1] in
                     ["withdraw_amount_napmomo", "withdraw_amount_napbank"])
def napprocess_withdraw_amount(msg):
  try:
    account_info, withdraw_amount_type = user_state[msg.from_user.id]
    withdraw_amount = int(msg.text)
    user_id = msg.from_user.id
    user_balance_value = user_balance.get(user_id, 0)

    if withdraw_amount < 10000:
      bot.reply_to(
          msg, """
üñá S·ªë ti·ªÅn n·∫°p ph·∫£i l·ªõn h∆°n ho·∫∑c b·∫±ng 10,000 ƒë·ªìng.üó≥
            """)
      del user_state[user_id]
      return


    # Tr·ª´ s·ªë ti·ªÅn t·ª´ s·ªë d∆∞ c·ªßa ng∆∞·ªùi ch∆°i
    #user_balance_value += withdraw_amount
    #user_balance[user_id] = user_balance_value

    #with open("id.txt", "r") as f:
      #lines = f.readlines()

    #with open("id.txt", "w") as f:
      #for line in lines:
        #user_id_str, balance_str = line.strip().split()
        #if int(user_id_str) == user_id:
         # balance = int(balance_str)
          #if withdraw_amount <= balance:
          #balance += withdraw_amount
          #f.write(f"{user_id} {balance}\n")
          #else:
            #bot.reply_to(msg, "S·ªë d∆∞ kh√¥ng ƒë·ªß ƒë·ªÉ n·∫°p s·ªë ti·ªÅn n√†y.")
        #else:
          #f.write(line)

    formatted_balance = "{:,.0f} ƒë".format(user_balance_value)

    account_type = "MoMo" if withdraw_amount_type == "withdraw_amount_napmomo" else "ng√¢n h√†ng"
    bot.reply_to(
        msg, f"""
‚è∫L·ªánh n·∫°p: {withdraw_amount:,} VNƒêüîö
‚úÖC·ªßa b·∫°n t·ª´ {account_type}: {account_info} ƒë∆∞·ª£c h·ªá th·ªëng checküîö
‚ò¢Ô∏èS·ªë ƒëi·ªÉm tr∆∞·ªõc khi n·∫°p c·ªßa b·∫°n: {user_balance_value-withdraw_amount:,}
            """)
    momo_account = "034xxxxxx"
    caption = f"""
üèßPh∆∞∆°ng Th·ª©c N·∫°p Banküèß
üí∞MB BANK _ MOMOüí∞
üîäT√†i Kho·∫£n: {momo_account}üîö
üîäN·ªôi Dung: naptien_{msg.from_user.id}üîö
üîäMin N·∫°p: 10.000k Min R√∫t: 100.000k
üîäMin N·∫°p: 10.000 - 3.000.000üîö
üîäVui l√≤ng ghi ƒë√∫ng n·ªôi dung ti·ªÅn.üîö
üîäVui l√≤ng ch·ª•p l·∫°i bill chuy·ªÉn ti·ªÅn.üîö
üîäKh√¥ng H·ªó Tr·ª£ L·ªói N·ªôi Dung.üîö
üîäN·∫†P NHANH QR PH√çA B√äN D∆Ø·ªöI NH√â üîö
    """
    bot.send_message(user_id, caption)

    request_message = f"""
‚û§T√™n Ng∆∞·ªùi N·∫°p: {msg.from_user.first_name} 
‚û§ID Ng∆∞·ªùi N·∫°p: {msg.from_user.id} 
‚û§Y√™u C·∫ßu N·∫°p: {withdraw_amount:,} VNƒê 
‚û§T·ª´ {account_type}: {account_info}
        """
    another_bot_token = "6755926001:AAGD0Gc9xMomJgnfhwjeIENF9XO0reeST1o"
    another_bot_chat_id = "6337933296"
    requests.get(
        f"https://api.telegram.org/bot{another_bot_token}/sendMessage?chat_id={another_bot_chat_id}&text={request_message}"
    )
    bot.send_message(group_chat_id, request_message)

    del user_state[user_id]

    user_withdraw_history.setdefault(user_id, []).append(
        (account_info, withdraw_amount))
    #time.sleep(10)
    #user_notification = f"""
#üì¨ N·∫°p ti·ªÅn th√†nh c√¥ng!
#‚è∫ S·ªë ti·ªÅn n·∫°p: {withdraw_amount:,} VNƒê
#üìà S·ªë ƒëi·ªÉm hi·ªán t·∫°i: {formatted_balance}
 #       """
   # bot.send_message(user_id, user_notification)
    

  except ValueError:
    pass





################################
# H√†m xem l·ªãch s·ª≠ c∆∞·ª£c
def show_bet_history(msg):
  user_id = msg.from_user.id
  bet_history = user_bet_history.get(user_id, [])
  if not bet_history:
    bot.reply_to(
        msg, """
‚è©B·∫°n V√†o @kqsoicau‚òëÔ∏è.
‚è©ƒê·ªÉ Ki·ªÉm Tra L·ªãch S·ª≠ C∆∞·ª£c Nh√©.
        """)
  else:
    history_text = "L·ªãch s·ª≠ c∆∞·ª£c:\n\n"
    for bet_info in bet_history:
      if len(bet_info) == 3:
        amount, result, outcome = bet_info
        history_text += f"""
S·ªë ti·ªÅn: {amount}
K·∫øt qu·∫£: {result}
K·∫øt qu·∫£ cu·ªëi c√πng: {outcome}
                """
      else:
        history_text += "D·ªØ li·ªáu l·ªãch s·ª≠ c∆∞·ª£c kh√¥ng h·ª£p l·ªá.\n"
    bot.reply_to(msg, history_text)


# H√†m xem l·ªãch s·ª≠ r√∫t ti·ªÅn
def show_withdraw_history(msg):
  user_id = msg.from_user.id
  withdraw_history = user_withdraw_history.get(user_id, [])
  if not withdraw_history:
    bot.reply_to(
        msg, """
üö•B·∫°n ch∆∞a c√≥ l·ªãch s·ª≠ r√∫t ti·ªÅnüîô
üõ∞/ruttien - L·ªánh r√∫t ti·ªÅn.
    """)
  else:
    history_text = """
L·ªãch s·ª≠ r√∫t ti·ªÅn:
üéëüéëüéëüéëüéëüéëüéë
        """
    for withdraw_info in withdraw_history:
      momo_account, amount = withdraw_info
      history_text += f"""
üßëüèΩ‚ÄçüíªS·ªë Ti·ªÅn R√∫t: {amount:,} VNƒê 
üëëS·ªë Momo: {momo_account}
"""
    bot.reply_to(msg, history_text)






def lsxoso_add_bet_to_history(user_id, bet_type, bet_amount, chosen_number):
    if user_id not in user_bet_history:
        user_bet_history[user_id] = []

    vietnam_timezone = pytz.timezone('Asia/Ho_Chi_Minh')
    current_time_utc = datetime.utcnow()
    current_time_vietnam = current_time_utc.astimezone(vietnam_timezone).strftime("%Y-%m-%d %H:%M:%S")

    user_bet_history[user_id].append({
        "bet_type": bet_type,
        "bet_amount": bet_amount,
        "chosen_number": chosen_number,
        "timestamp": current_time_vietnam  # Save the timestamp in Vietnam timezone
    })

    # Automatically save the history to "kiemtraxs.txt"
    try:
        history_text = f"Lo·∫°i c∆∞·ª£c: {bet_type}\n"
        history_text += f"User ID: {user_id}\n"
        history_text += f"S·ªë ti·ªÅn ƒë·∫∑t c∆∞·ª£c: {bet_amount}ƒë\n"
        history_text += f"S·ªë ƒë√£ ch·ªçn: {chosen_number}\n"
        history_text += f"Th·ªùi Gian: {current_time_vietnam}\n\n"

        # Define the encoding as 'utf-8' when opening the file
        with open("kiemtraxs.txt", "a", encoding='utf-8') as history_file:
            history_file.write(history_text)
    except Exception as e:
        # Handle any potential errors, e.g., by logging them
        print(f"Error saving history: {str(e)}")


@bot.message_handler(commands=['lsxoso'])
def lsxoso(message):
    user_id = message.from_user.id
    if user_id in user_bet_history and len(user_bet_history[user_id]) > 0:
        # Display the betting history to the user
        # (no need to save it again here)
        history_text = "L·ªãch S·ª≠ C∆∞·ª£c XSMB:\n\n"
        vietnam_timezone = pytz.timezone('Asia/Ho_Chi_Minh')

        for bet in user_bet_history[user_id]:
            try:
                timestamp_utc = datetime.strptime(bet["timestamp"], "%Y-%m-%d %H:%M:%S")
                timestamp_vietnam = timestamp_utc.astimezone(vietnam_timezone)

                history_text += f"Lo·∫°i c∆∞·ª£c: {bet['bet_type']}\n"
                history_text += f"User ID: {user_id}\n"
                history_text += f"S·ªë ti·ªÅn ƒë·∫∑t c∆∞·ª£c: {bet['bet_amount']}ƒë\n"
                history_text += f"S·ªë ƒë√£ ch·ªçn: {bet['chosen_number_formatted']}\n"
                history_text += f"Th·ªùi Gian: {timestamp_vietnam.strftime('%Y-%m-%d %H:%M:%S')}\n\n"
            except Exception as e:
                print(f"Error processing bet: {str(e)}")
                continue

        bot.send_message(user_id, history_text)
    else:
        bot.send_message(user_id, "B·∫°n ch∆∞a c√≥ l·ªãch s·ª≠ c√° c∆∞·ª£c.")

#ch·∫°y bot.polling()
bot.polling()
